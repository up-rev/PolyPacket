{
  protocol:{
  name: "sample"
  prefix: "sp"
  desc: "This is a sample protocol made up to demonstrate features of the PolyPacket code generation tool. The idea is to have a tool that can automatically create parseable/serializable messaging for embedded systems"
  fields:[

      /*  Common */
      {name:"cmd" , type: "enum", format: "hex", desc: "command byte for controlling node" ,
            vals: [ {name: "led_ON", desc: "turns on led"},
                    {name: "led_OFF", desc:"turns off led"},
                    {name: "reset", desc:"resets device"} ] },

      /* Sensor Data */
      {name: "sensorA" , type: "int16", desc: "Value of Sensor A"},
      {name: "sensorB" , type: "int", desc: "Value of Sensor B"},
      {name: "sensorName" , type: "string[32]", desc: "Name of sensor"},
      ],
  packets: [
      {name:"SendCmd", desc:"Message to send command to node",
          fields: [ {name:"cmd"}]},

      {name: "GetData", desc:"Message tp get data from node", response: "Data"},
      {name: "Data", desc:"Message Containing Sensor Data",
        fields:[ {name: "sensorA"},
                 {name: "sensorB"},
                 {name: "sensorName", desc: "Name of Sensor responding to message"}]},
    ],
  structs: [
      {name: "node",desc:"Struct for modeling node",
      fields:[ {name: "sensorA"},
               {name: "sensorB"},
               {name: "sensorName"}]},
  ]
}

}
